import TextItem from "../TextItem"
import HorizontalLine from "../HorizontalLine"

function AStarInfo() {
    return (
        <>
            <TextItem>
                Алгоритм пошуку A* є одним із найкращих, що використовуються для пошуку шляхів та обходу графів.
            </TextItem>
            
            <TextItem>
                Належить до евристичних алгоритмів пошуку. Тобто використовує евристику при виборі наступної вершини для перегляду - функцію,
                що надає доволі швидке і ефективне рішення (можливо не найкраще).
                Існують різні евристики, в даній реалізації алгоритму використовується Мангеттенська метрика - функція що повертає приблизну відстань між двома вершинами.
                Вона дуже проста - це лише сума відстаней за координатами: |x1 - x2| + |y1 - y2|
            </TextItem>
            
            <TextItem>
                Алгоритм парцює так, як і пошук в ширину, єдина відмінність - вибір наступної вершини з черги.
                Даний алгоритм знає місцезнаходження кінцевої вершини, і враховує це.
                Наступна вершина вибирається така, яка має мінімальне значення f(x). f(x) = g(x) + h(x), де 
                g(x) - функція, значення якої дорівнюють вартості шляху від початкової вершини до x,
                h(x) - евристична функція, оцінює вартість шляху від вершини x до кінцевої.
            </TextItem>
            
            <TextItem><b>Гарантує найкоротший шлях.</b></TextItem>
            
            <TextItem>
                Основним недоліком алгоритму А* є потреба в пам'яті для збереження всіх відомих вершин. Через це алгортим А* непридатний для багатьох задач.
            </TextItem>
            
            <HorizontalLine/>
            
            <TextItem>Покроковий опис алгоритму пошуку А*:</TextItem>
            <TextItem tabs={1}>{"1. Створити масив для зберігання відвіданих вершин"}</TextItem>
            <TextItem tabs={1}>{"1. Створити пусту чергу. Добавити в чергу стартову вершину"}</TextItem>
            <TextItem tabs={1}>{"2. Поки черга не пуста, повторювати кроки 3-9:"}</TextItem>
            <TextItem tabs={2}>{"3. Взяти з черги елемент, який має найменше значення функції f(x) та присвоїти його в змінну current"}</TextItem>
            <TextItem tabs={2}>{"4. Добавити current в список відвіданих вершин"}</TextItem>
            <TextItem tabs={2}>{"5. Якщо current це кінцева вершина - завершити виконання. Шлях знайдено"}</TextItem>
            <TextItem tabs={2}>{`6. Якщо current має невідвідану вершину зверху,
                то добавити її в кінець черги`
            }</TextItem>
            <TextItem tabs={2}>{`7. Якщо current має невідвідану вершину справа,
                то добавити її в кінець черги`
            }</TextItem>
            <TextItem tabs={2}>{`8. Якщо current має невідвідану вершину знизу,
                то добавити її в кінець черги`
            }</TextItem>
            <TextItem tabs={2}>{`9. Якщо current має невідвідану вершину зліва,
                то добавити її в кінець черги`
            }</TextItem>
            <TextItem tabs={1}>{`10. Алгоритм завершено, шляху не існує`}</TextItem>
        </>
    );
}

export default AStarInfo;