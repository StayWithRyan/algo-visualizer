import TextItem from "../TextItem"
import HorizontalLine from "../HorizontalLine"

function TournamentSortInfo() {
    return (
        <>
            <TextItem>Метод вибірки з дерева (англ. Tournament Sort).</TextItem>
            <TextItem>
                Послідовність чисел розбивається на пари, менший елемент пари виграє і просувається вперед.
                Дане просування вепред відбувається доти, доки ми не отримаємо один елемент. 
                Він буде найменшим з усіх. Поміщаємо його у відсортований список, та виконуємо описану процедуру заново, поки не буде вибрано усі елементи.
            </TextItem>

            <TextItem>
                У даній реалізації алгоритму його складність становить O(n<sup>2</sup>),
                і на практиці не застосовується. Основна причина такої складності - побудова дерева на кожному кроці з початку.
                Існує інший варіант даного сортування, який покращує даний алгоритм, і не перебудовує дорево на кожному кроці. І його складність - O(n ∙ log(n))
            </TextItem>

            <HorizontalLine/>
            
            <TextItem>Покроковий опис сортування методом вибірки з дерева:</TextItem>
            <TextItem tabs={1}>{"1. Повторювати кроки 2-3 при i=0,1,...,n-1"}</TextItem>
            <TextItem tabs={2}>{`2. Побудувати тернірне дерево із початкового масиву. 
                Всі елементи масиву поміщаються на останній рівень дерева.
                Починаючи з останнього рівня відбувається проходження: на рівень вверх із двох синів проходить менший із них
            `}</TextItem>
            <TextItem tabs={2}>{"3. Вибрати кореневу вершину, помістити її у відсортований масив, і видалити із початкового"}</TextItem>
        </>
    );
}

export default TournamentSortInfo;