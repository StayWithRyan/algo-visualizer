import TextItem from "../TextItem"
import HorizontalLine from "../HorizontalLine"

function KMPInfo() {
    return (
        <>
            <TextItem>
                Алгоритм використовуючи просте спостереження, що коли відбувається невідповідність, 
                то зразок містить у собі достатньо інформації для того, щоб визначити, 
                де наступне входження може початися, таким чином пропускаючи кількаразову перевірку попередньо порівняних символів.
            </TextItem>
            <TextItem>
                Попередньо проводиться дослідження зразка та для кожного його підрядка визначається префікс-суфікс-функція. 
                Для цього вираховується найдовший початок підрядка, який співпадає з його кінцем.
            </TextItem>
            <TextItem>Складність алгоритму - O(n+m), де n — довжина тексту, m — довжина зразка.</TextItem>

            <HorizontalLine/>

            <TextItem>Покроковий опис алгоритму пошуку КМП:</TextItem>
            <TextItem tabs={1}>
                1. Препроцесінг зразка: Обрахувати префікс-суфікс-функцію для кожного підрядка зразка. 
                В результаті отримаємо масив lps, зі значеннями для кожного підрядка
            </TextItem>
            <TextItem tabs={1}>2. Присвоїти i = 0 (індекс тексту); j = 0 (індекс зразка)</TextItem>
            <TextItem tabs={1}>
                3. Перевірити чи збігається зразок за індексом j із текстом за індексом i, по черзі порівнявши всі символи.
            </TextItem>
            <TextItem tabs={1}>
                4. Якщо j == M, то зразок знайдено та алгоритм завершено.
            </TextItem>
            <TextItem tabs={1}>
                5. Якщо j != 0, то присвоїти j = lps[j - 1], інакше присвоїти i = i + 1.
            </TextItem>
            <TextItem tabs={1}>
                {`6. Якщо N-i < M-j або i >= N, то алгоритм завершено, зразок не знайдено. Інакше перейти до 2 кроку.`}
            </TextItem>
        </>
    );

}

export default KMPInfo;

